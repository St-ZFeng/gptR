% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trydebug.R
\name{trydebug}
\alias{trydebug}
\title{Using Chatgpt or Any Other Large Model to Fix Your Code to Achieve Your Need.}
\usage{
trydebug(
  need,
  code,
  error,
  model,
  ...,
  runmode = FALSE,
  showtokennum = TRUE,
  chat_function = NULL
)
}
\arguments{
\item{need}{Your need, which should be a string.}

\item{code}{Your code string.}

\item{error}{The problem of the code.}

\item{model}{The name string of the model you want to use.}

\item{...}{Any data you provide to the model, which can be more than one. But in fact the model doesn't read the data details, just gets it's names and types.}

\item{runmode}{Whether to show the token's usage, defaults to TRUE.}

\item{showtokennum}{Whether or not to show the use amount of tokens after a model call, defaults to TRUE.}

\item{chat_function}{A custom model chat API interface function that takes three parameters, message, model, and tokennum, and returns a list consisting of answer and status_code. Defaults to NULL, at which point the built-in openai style interface function is called. For custom function styles, see the function mychat().}
}
\value{
Anything or nothing.
}
\description{
This function is actually a subsidiary function of the AIPROCESS function. If it's debugmode parameter is TRUE, this function is automatically called once for better results when the model-supplied code runs an error. However, this function can also be called independently, please refer to the parameter explanation and sample code for specific usage.
}
\examples{
\donttest{

x <- 1:100
y <- 1:100
df1 <- data.frame(x = x, y = y)

trydebug("Add 1 to the first column of the data frame","df1 <- df1+1","The code adds 1 to all columns in the data frame", "gpt-4")


}

}
